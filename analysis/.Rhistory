gq$GQ_correct <-as.character(gq$GQ_correct)
gq$GQ_correct <- as.numeric(gq$GQ_correct)
#renaming things for prettier graphs
gq$prompt %<>%
str_replace("all", "All")%>%
str_replace("most", "Most")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
#creating dataframe for analyses
data_gq <- gq %>%
mutate(test = "Give-Quantifier")
View(data_gq)
head(data_gq)
agg.gq <- data_gq %>%
mutate(GQ_correct = as.integer(GQ_correct)) %>%
group_by(prompt, Agesplit)%>%
multi_boot_standard("GQ_correct", na.rm=T)%>%
rename(Age=Agesplit)
View(agg.gq)
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed")
View(data_gq)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
Agesplit = factor(split_2,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(Agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(Agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
agg.gq <- data_gq %>%
mutate(GQ_correct = as.integer(GQ_correct)) %>%
group_by(prompt, Agesplit)%>%
multi_boot_standard("GQ_correct", na.rm=T)%>%
rename(Age=Agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed")
#read in and establish dataframe
g <- read.csv("../data/GQ_coding.csv")
g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)] <- sapply(g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)],as.character) #for unknown reasons this is necessary for melt.data.frame now
#change to long form
gq=melt.data.frame(g,c("sub_ID", "test_age","condition", "order", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given", "X1_correct", "X2_correct", "X3_correct", "X4_correct", "X5_correct", "X6_correct",  "X7_correct", "X8_correct"))
#making a respectable df
onethird <- (1/3)*nrow(gq)
data <- gq[1:onethird,]
data$selection <- gq$value[(onethird+1):(onethird*2)]
data$type <- gq$value[(2*onethird+1):nrow(gq)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
names(data)[8] <- "num_given"
names(data)[9] <- "GQ_correct"
gq <- data
#filtering data, creating age breaks
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(Agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
#this is because num_given is a factor - need to change to a number - need to do this for standard error
gq$num_given <- as.character(gq$num_given)
gq$num_given <- as.numeric(gq$num_given)
gq$GQ_correct <-as.character(gq$GQ_correct)
gq$GQ_correct <- as.numeric(gq$GQ_correct)
#renaming things for prettier graphs
gq$prompt %<>%
str_replace("all", "All")%>%
str_replace("most", "Most")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
#creating dataframe for analyses
data_gq <- gq %>%
mutate(test = "Give-Quantifier")
agg.gq <- data_gq %>%
mutate(GQ_correct = as.integer(GQ_correct)) %>%
group_by(prompt, Agesplit)%>%
multi_boot_standard("GQ_correct", na.rm=T)%>%
rename(Age=Agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed")
View(data_gq)
#read in and establish dataframe
g <- read.csv("../data/GQ_coding.csv")
g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)] <- sapply(g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)],as.character) #for unknown reasons this is necessary for melt.data.frame now
#change to long form
gq=melt.data.frame(g,c("sub_ID", "test_age","condition", "order", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given", "X1_correct", "X2_correct", "X3_correct", "X4_correct", "X5_correct", "X6_correct",  "X7_correct", "X8_correct"))
#making a respectable df
onethird <- (1/3)*nrow(gq)
data <- gq[1:onethird,]
data$selection <- gq$value[(onethird+1):(onethird*2)]
data$type <- gq$value[(2*onethird+1):nrow(gq)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
names(data)[8] <- "num_given"
names(data)[9] <- "GQ_correct"
gq <- data
#filtering data, creating age breaks
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(Agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
#this is because num_given is a factor - need to change to a number - need to do this for standard error
gq$num_given <- as.character(gq$num_given)
gq$num_given <- as.numeric(gq$num_given)
gq$GQ_correct <-as.character(gq$GQ_correct)
gq$GQ_correct <- as.numeric(gq$GQ_correct)
#renaming things for prettier graphs
gq$prompt %<>%
str_replace("all", "All")%>%
str_replace("most", "Most")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
#creating dataframe for analyses
data_gq <- gq %>%
mutate(test = "Give-Quantifier")
View(data_gq)
View(gq)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years")))
View(gq)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(Agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
#wide-form
dc <- read.csv("../data/DCCS_coding.csv")
#long form
dccs=melt.data.frame(dc,c("sub_ID","test_age","condition", "order"),c("pre_1", "pre_2", "pre_3", "pre_4", "pre_5", "pre_6",  "post_1", "post_2", "post_3", "post_4", "post_5", "post_6"))
#filtering data, creating age breaks
dccs %<>%
filter(sub_ID != "") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years")))
#renaming things
names(dccs)[5] <- "trial_type"
names(dccs)[6] <- "DCCS_correct"
tmp1 <- unlist(dccs$trial_type)%>%
str_replace("pre_1", "pre")%>%
str_replace("pre_2", "pre")%>%
str_replace("pre_3", "pre")%>%
str_replace("pre_4", "pre")%>%
str_replace("pre_5", "pre")%>%
str_replace("pre_6", "pre")%>%
str_replace("post_1", "post")%>%
str_replace("post_2", "post")%>%
str_replace("post_3", "post")%>%
str_replace("post_4", "post")%>%
str_replace("post_5", "post")%>%
str_replace("post_6", "post")
tmp <- as.data.frame(tmp1) %>%
dplyr::rename(switch_type = tmp1)
tmp2 <- bind_cols(dccs, tmp)
dccs <- tmp2
#renaming for prettier graphs
dccs$switch_type %<>%
str_replace("post", "Post-switch")%>%
str_replace("pre", "Pre-switch")
dccs$trial_type <- factor(dccs$trial_type, levels=c("Pre-switch","Post-switch"))
agg.gq <- data_gq %>%
mutate(GQ_correct = as.integer(GQ_correct)) %>%
group_by(prompt, Agesplit)%>%
multi_boot_standard("GQ_correct", na.rm=T)%>%
rename(Age=Agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed")
View(data_gq)
g <- read.csv("../data/GQ_coding.csv")
g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)] <- sapply(g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)],as.character) #for unknown reasons this is necessary for melt.data.frame now
#change to long form
gq=melt.data.frame(g,c("sub_ID", "test_age","condition", "order", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given", "X1_correct", "X2_correct", "X3_correct", "X4_correct", "X5_correct", "X6_correct",  "X7_correct", "X8_correct"))
#making a respectable df
onethird <- (1/3)*nrow(gq)
data <- gq[1:onethird,]
data$selection <- gq$value[(onethird+1):(onethird*2)]
data$type <- gq$value[(2*onethird+1):nrow(gq)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
names(data)[8] <- "num_given"
names(data)[9] <- "GQ_correct"
gq <- data
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
View(gq)
View(x)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years")))
View(gq)
g <- read.csv("../data/GQ_coding.csv")
g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)] <- sapply(g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)],as.character) #for unknown reasons this is necessary for melt.data.frame now
#change to long form
gq=melt.data.frame(g,c("sub_ID", "test_age","condition", "order", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given", "X1_correct", "X2_correct", "X3_correct", "X4_correct", "X5_correct", "X6_correct",  "X7_correct", "X8_correct"))
#making a respectable df
onethird <- (1/3)*nrow(gq)
data <- gq[1:onethird,]
data$selection <- gq$value[(onethird+1):(onethird*2)]
data$type <- gq$value[(2*onethird+1):nrow(gq)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
names(data)[8] <- "num_given"
names(data)[9] <- "GQ_correct"
gq <- data
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years")))
View(gq)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
View(gq)
#this is because num_given is a factor - need to change to a number - need to do this for standard error
gq$num_given <- as.character(gq$num_given)
gq$num_given <- as.numeric(gq$num_given)
gq$GQ_correct <-as.character(gq$GQ_correct)
gq$GQ_correct <- as.numeric(gq$GQ_correct)
#renaming things for prettier graphs
gq$prompt %<>%
str_replace("all", "All")%>%
str_replace("most", "Most")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
#creating dataframe for analyses
data_gq <- gq %>%
mutate(test = "Give-Quantifier")
View(data_gq)
agg.gq <- data_gq %>%
mutate(GQ_correct = as.integer(GQ_correct)) %>%
group_by(prompt, agesplit)%>%
multi_boot_standard("GQ_correct", na.rm=T)%>%
rename(Age=agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed")
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed") + facet_wrap(Age~prompt)
head(data_gq)
hist_data <- data_gq %>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)
hist_data <- data_gq %>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
quartz()
ggplot(data = agg.gq,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
hist_data <- data_gq %>%
filter(prompt != "Most", prompt != "All")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
uartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 4)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(~prompt, ncol = 2)
hist_data <- data_gq %>%
filter(prompt != "All")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(~prompt, ncol = 3)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 3)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 3)
hist_data <- data_gq %>%
filter(prompt != "Most")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 3)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 2, nrow = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4)
hist_data <- data_gq %>%
filter(prompt != "Most", prompt != "All")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14, legend.position="none") +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4) + theme(legend.position="none")
