select(sub_ID, agesplit) %>%
distinct()%>%
group_by(agesplit)%>%
summarize(n=n())
#accuracy by age group in different trials
agg.data <- aggregate(data$correct, list(data$type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1")
#read in and establish dataframe
d1 <- read.csv("..//data/GQ_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given"))
#making a respectable df
data <- d2[1:256,]
data$num_given <- d2$value[257:512]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
#filtering data, creating age breaks
data %<>%
filter(sub_ID != "", num_given != "N/A") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))%>%
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))%>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
#this is because num_given is a factor - need to change to a number
data$num_given <- as.character(data$num_given)
data$num_given <- as.numeric(data$num_given)
data_gq <- data
data_gq$test <- "Give-Quantifier"
agg.data <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=mean)
agg.data.sd <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=sd)
names(agg.data) <- c("prompt", "agesplit", "num_given")
agg.data$sd <- agg.data.sd$x
##establish limits
limits <- aes(ymax = num_given + sd, ymin=num_given - sd)
#plot
quartz()
ggplot(data = agg.data,
aes(x=prompt, y=num_given, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Mean num given") +
xlab("Quantifier prompt") +
scale_fill_brewer(palette="Set1")
d1 <- read.csv("..//data/DCCS_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order"),c("pre_1", "pre_2", "pre_3", "pre_4", "pre_5", "pre_6",  "post_1", "post_2", "post_3", "post_4", "post_5", "post_6"))
#filtering data, creating age breaks
data <- d2 %>%
filter(sub_ID != "") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))
names(data)[6] <- "trial_type"
names(data)[7] <- "correct"
data_dccs <- data
data_dccs$test <- "DCCS"
agg.data <- aggregate(data$correct, list(data$trial_type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$trial_type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("trial_type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=trial_type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1") + facet_wrap(~agesplit)
View(data)
View(data)
View(d2)
View(d2)
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
library(knitr)
?melt.data.frame
install.packages(reshape2)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
View(d2)
View(d2)
d1 <- read.csv("..//data/SI_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
View(d2)
View(d2)
View(d1)
View(d1)
View(d2)
View(d2)
d1 <- read.csv("..//data/SI_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition", "carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies", "carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition", "carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
??melt.data.frame
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies", "carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition", "carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
View(d2)
View(d2)
length(d2)
nrow(d2)
data <- d2[1:576,]
View(data)
data <- d2[1:onethird,]
onethird <- (1/3)nrow(d2)
onethird <- (1/3)*nrow(d2)
data <- d2[1:onethird,]
View(data)
View(data)
twothirds <- (2/3)nrow(d2)
twothirds <- (2/3)*nrow(d2)
threethirds <- nrow(d2)
data$condition <- d2$value[onethird+1:twothirds]
data$condition <- d2$value[onethird+1:twothirds,]
data$condition <- d2$value[577:1152]
data$type <- d2$value[1153:1728]
onethird <- (1/3)*nrow(d2)
twothirds <- (2/3)*nrow(d2)
threethirds <- nrow(d2)
data <- d2[1:onethird,]
data <- d2[1:576,]
data$condition <- d2$value[onethird:twothirds]
data$condition <- d2$value[(onethird+1):twothirds]
data$type <- d2$value[(twothirds+1):threethirds]
d1 <- read.csv("..//data/SI_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies", "carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition", "carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
#making a respectable df
#data <- d2[1:576,]
#data$condition <- d2$value[577:1152]
#data$type <- d2$value[1153:1728]
onethird <- (1/3)*nrow(d2)
twothirds <- (2/3)*nrow(d2)
threethirds <- nrow(d2)
data <- d2[1:onethird,]
data$condition <- d2$value[(onethird+1):twothirds]
data$type <- d2$value[(twothirds+1):threethirds]
names(data)[7] <- "item"
names(data)[8] <- "correct"
data$correct <- data$correct==1
#filtering out unnecessary things, adding agesplit
data %<>%
filter(sub_ID != "", correct != "NA") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))%>%
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))%>%
filter(agesplit != "NA")
data_si <- data
data_si$test <- "Scalar Implicature"
#number of kids in each age group
num_kids <- data %>%
select(sub_ID, agesplit) %>%
distinct()%>%
group_by(agesplit)%>%
summarize(n=n())
#accuracy by age group in different trials
agg.data <- aggregate(data$correct, list(data$type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rm(list=ls())
library(ggplot2)
library(reshape)
library(entropy)
library(pscl)
library(dplyr)
library(stringr)
library(tidyr)
library(markdown)
library(directlabels)
library(magrittr)
library(bootstrap)
library(RMySQL)
library(RCurl)
theme_set(theme_bw())
d1 <- read.csv("..//data/SI_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies", "carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition", "carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
#making a respectable df
#data <- d2[1:576,]
#data$condition <- d2$value[577:1152]
#data$type <- d2$value[1153:1728]
onethird <- (1/3)*nrow(d2)
twothirds <- (2/3)*nrow(d2)
threethirds <- nrow(d2)
data <- d2[1:onethird,]
data$condition <- d2$value[(onethird+1):twothirds]
data$type <- d2$value[(twothirds+1):threethirds]
names(data)[7] <- "item"
names(data)[8] <- "correct"
data$correct <- data$correct==1
#filtering out unnecessary things, adding agesplit
data %<>%
filter(sub_ID != "", correct != "NA") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))%>%
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))%>%
filter(agesplit != "NA")
data_si <- data
data_si$test <- "Scalar Implicature"
#number of kids in each age group
num_kids <- data %>%
select(sub_ID, agesplit) %>%
distinct()%>%
group_by(agesplit)%>%
summarize(n=n())
#accuracy by age group in different trials
agg.data <- aggregate(data$correct, list(data$type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1")
#read in and establish dataframe
d1 <- read.csv("..//data/GQ_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given"))
#making a respectable df
data <- d2[1:256,]
data$num_given <- d2$value[257:512]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
#filtering data, creating age breaks
data %<>%
filter(sub_ID != "", num_given != "N/A") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))%>%
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))%>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
#this is because num_given is a factor - need to change to a number
data$num_given <- as.character(data$num_given)
data$num_given <- as.numeric(data$num_given)
data_gq <- data
data_gq$test <- "Give-Quantifier"
agg.data <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=mean)
agg.data.sd <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=sd)
names(agg.data) <- c("prompt", "agesplit", "num_given")
agg.data$sd <- agg.data.sd$x
##establish limits
limits <- aes(ymax = num_given + sd, ymin=num_given - sd)
#plot
quartz()
ggplot(data = agg.data,
aes(x=prompt, y=num_given, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Mean num given") +
xlab("Quantifier prompt") +
scale_fill_brewer(palette="Set1")
d1 <- read.csv("..//data/DCCS_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order"),c("pre_1", "pre_2", "pre_3", "pre_4", "pre_5", "pre_6",  "post_1", "post_2", "post_3", "post_4", "post_5", "post_6"))
#filtering data, creating age breaks
data <- d2 %>%
filter(sub_ID != "") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))
names(data)[6] <- "trial_type"
names(data)[7] <- "correct"
data_dccs <- data
data_dccs$test <- "DCCS"
agg.data <- aggregate(data$correct, list(data$trial_type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$trial_type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("trial_type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=trial_type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1") + facet_wrap(~agesplit)
#setting up a dataframe with all data from all tests
d_all <- bind_rows(data_si, data_gq, data_dccs)
d_all %<>%
filter(agesplit != "NA")
nrow(data)
d1 <- read.csv("..//data/GQ_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given"))
nrow(d2)
data <- d2[1:(nrow(d2)/2),]
data <- d2[1:(nrow(d2)/2)]
data <- d2[1:(nrow(d2)/2),]
data <- d2[1:firsthalf,]
firsthalf <- nrow(d2)/2
data <- d2[1:firsthalf,]
data$num_given <- d2$value[firsthalf+1:nrow(d2)]
data$num_given <- d2$value[(firsthalf+1):nrow(d2)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
onethird <- (1/3)*nrow(d2)
data <- d2[1:onethird,]
data$condition <- d2$value[(onethird+1):(onethird*2)]
data$type <- d2$value[(2*onethird+1):nrow(d2)]
library(knitr)
opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE)
rm(list=ls())
library(ggplot2)
library(reshape)
library(entropy)
library(pscl)
library(dplyr)
library(stringr)
library(tidyr)
library(markdown)
library(directlabels)
library(magrittr)
library(bootstrap)
library(RMySQL)
library(RCurl)
theme_set(theme_bw())
d1 <- read.csv("..//data/SI_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order", "training"),c("carrot", "hat", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies", "carrot_condition", "hat_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition", "carrot_type", "hat_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
#making a respectable df
#data <- d2[1:576,]
#data$condition <- d2$value[577:1152]
#data$type <- d2$value[1153:1728]
onethird <- (1/3)*nrow(d2)
data <- d2[1:onethird,]
data$condition <- d2$value[(onethird+1):(onethird*2)]
data$type <- d2$value[(2*onethird+1):nrow(d2)]
names(data)[7] <- "item"
names(data)[8] <- "correct"
data$correct <- data$correct==1
#filtering out unnecessary things, adding agesplit
data %<>%
filter(sub_ID != "", correct != "NA") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))%>%
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))%>%
filter(agesplit != "NA")
data_si <- data
data_si$test <- "Scalar Implicature"
#number of kids in each age group
num_kids <- data %>%
select(sub_ID, agesplit) %>%
distinct()%>%
group_by(agesplit)%>%
summarize(n=n())
#accuracy by age group in different trials
agg.data <- aggregate(data$correct, list(data$type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1")
#read in and establish dataframe
d1 <- read.csv("..//data/GQ_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given"))
#making a respectable df
#data <- d2[1:256,]
#data$num_given <- d2$value[257:512]
firsthalf <- nrow(d2)/2
data <- d2[1:firsthalf,]
data$num_given <- d2$value[(firsthalf+1):nrow(d2)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
#filtering data, creating age breaks
data %<>%
filter(sub_ID != "", num_given != "N/A") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))%>%
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))%>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
#this is because num_given is a factor - need to change to a number
data$num_given <- as.character(data$num_given)
data$num_given <- as.numeric(data$num_given)
data_gq <- data
data_gq$test <- "Give-Quantifier"
agg.data <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=mean)
agg.data.sd <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=sd)
names(agg.data) <- c("prompt", "agesplit", "num_given")
agg.data$sd <- agg.data.sd$x
##establish limits
limits <- aes(ymax = num_given + sd, ymin=num_given - sd)
#plot
quartz()
ggplot(data = agg.data,
aes(x=prompt, y=num_given, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Mean num given") +
xlab("Quantifier prompt") +
scale_fill_brewer(palette="Set1")
d1 <- read.csv("..//data/DCCS_coding.csv")
d2=melt.data.frame(d1,c("sub_ID","experimenter","test_age","condition", "order"),c("pre_1", "pre_2", "pre_3", "pre_4", "pre_5", "pre_6",  "post_1", "post_2", "post_3", "post_4", "post_5", "post_6"))
#filtering data, creating age breaks
data <- d2 %>%
filter(sub_ID != "") %>%
#mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)))
mutate(agesplit = cut(test_age, breaks=c(3, 4, 5)))
names(data)[6] <- "trial_type"
names(data)[7] <- "correct"
data_dccs <- data
data_dccs$test <- "DCCS"
agg.data <- aggregate(data$correct, list(data$trial_type, data$agesplit), FUN=sum)
agg.data.len <- aggregate(data$correct, list(data$trial_type, data$agesplit), FUN=length)
agg.data$x <- agg.data$x
agg.data.len$x <- agg.data.len$x
names(agg.data) <- c("trial_type", "agesplit", "correct")
agg.data$total <- agg.data.len$x
agg.data$prop.corr <- agg.data$correct / agg.data$total
agg.data$q <- 1 - agg.data$prop.corr
agg.data$err <- sqrt((agg.data$prop.corr * agg.data$q) / agg.data$total)
dodge <- position_dodge(width=0.9)
limits <- aes(ymax = prop.corr + err, ymin=prop.corr - err)
#plot
quartz()
ggplot(data = agg.data,
aes(x=trial_type, y=prop.corr, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Proportion correct") +
xlab("Trial Type") +
scale_fill_brewer(palette="Set1") + facet_wrap(~agesplit)
#setting up a dataframe with all data from all tests
d_all <- bind_rows(data_si, data_gq, data_dccs)
d_all %<>%
filter(agesplit != "NA")
View(d_all)
View(d_all)
quartz()
ggplot(data = agg.data,
aes(x=prompt, y=num_given, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Mean num given") +
xlab("Quantifier prompt") +
scale_fill_brewer(palette="Set1")
agg.data <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=mean)
agg.data.sd <- aggregate(data$num_given, list(data$prompt, data$agesplit), FUN=sd)
names(agg.data) <- c("prompt", "agesplit", "num_given")
agg.data$sd <- agg.data.sd$x
##establish limits
limits <- aes(ymax = num_given + sd, ymin=num_given - sd)
quartz()
ggplot(data = agg.data,
aes(x=prompt, y=num_given, fill=agesplit)) +
geom_bar(stat="identity", position = position_dodge())  + geom_errorbar(limits, position=dodge)+
ylab("Mean num given") +
xlab("Quantifier prompt") +
scale_fill_brewer(palette="Set1")
quartz()
hist(data = agg.data, aes(x=prompt, y=num_given, fill=agesplit))
hist(x, data = agg.data, aes(x=prompt, y=num_given, fill=agesplit))
