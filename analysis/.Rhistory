agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
View(gq)
View(x)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years")))
View(gq)
g <- read.csv("../data/GQ_coding.csv")
g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)] <- sapply(g[,c(8,10,12,14,16,18,20,22, 31, 32, 33, 34)],as.character) #for unknown reasons this is necessary for melt.data.frame now
#change to long form
gq=melt.data.frame(g,c("sub_ID", "test_age","condition", "order", "training"),c("X1_condition", "X2_condition", "X3_condition", "X4_condition", "X5_condition", "X6_condition",  "X7_condition", "X8_condition", "X1_given", "X2_given", "X3_given", "X4_given", "X5_given", "X6_given",  "X7_given", "X8_given", "X1_correct", "X2_correct", "X3_correct", "X4_correct", "X5_correct", "X6_correct",  "X7_correct", "X8_correct"))
#making a respectable df
onethird <- (1/3)*nrow(gq)
data <- gq[1:onethird,]
data$selection <- gq$value[(onethird+1):(onethird*2)]
data$type <- gq$value[(2*onethird+1):nrow(gq)]
names(data)[6] <- "trial"
names(data)[7] <- "prompt"
names(data)[8] <- "num_given"
names(data)[9] <- "GQ_correct"
gq <- data
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years")))
View(gq)
gq %<>%
filter(sub_ID != "", num_given != "N/A") %>%
mutate(agesplit = cut(test_age, breaks=c(3, 3.5, 4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years", "4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA", num_given != "0 (8 oranges)", num_given != "0 (8 bananas)", num_given != "0 (8 strawberries)")
View(gq)
#this is because num_given is a factor - need to change to a number - need to do this for standard error
gq$num_given <- as.character(gq$num_given)
gq$num_given <- as.numeric(gq$num_given)
gq$GQ_correct <-as.character(gq$GQ_correct)
gq$GQ_correct <- as.numeric(gq$GQ_correct)
#renaming things for prettier graphs
gq$prompt %<>%
str_replace("all", "All")%>%
str_replace("most", "Most")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
#creating dataframe for analyses
data_gq <- gq %>%
mutate(test = "Give-Quantifier")
View(data_gq)
agg.gq <- data_gq %>%
mutate(GQ_correct = as.integer(GQ_correct)) %>%
group_by(prompt, agesplit)%>%
multi_boot_standard("GQ_correct", na.rm=T)%>%
rename(Age=agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed")
quartz()
ggplot(data = agg.gq,
aes(x=prompt, y=mean, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .8,
show_guide = FALSE,
position=position_dodge(1)) +
ylab("Proportion correct") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + geom_hline(yintercept = .5, linetype = "dashed") + facet_wrap(Age~prompt)
head(data_gq)
hist_data <- data_gq %>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)
hist_data <- data_gq %>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = agg.gq,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
quartz()
ggplot(data = agg.gq,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
hist_data <- data_gq %>%
filter(prompt != "Most", prompt != "All")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
uartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 4)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(~prompt, ncol = 2)
hist_data <- data_gq %>%
filter(prompt != "All")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(~prompt, ncol = 3)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Average number given") +
xlab("Quantifier Prompt") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 3)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 3)
hist_data <- data_gq %>%
filter(prompt != "Most")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 3)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, ncol = 2, nrow = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 2)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4)
hist_data <- data_gq %>%
filter(prompt != "Most", prompt != "All")%>%
group_by(agesplit, prompt, num_given)%>%
dplyr::summarise(n = n()) %>%
group_by(agesplit, prompt) %>%
mutate(n.total = sum(n), prop = n/n.total)%>%
rename(Age=agesplit)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14, legend.position="none") +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4)
quartz()
ggplot(data = hist_data,
aes(x=num_given, y=prop, fill=Age)) +
geom_bar(stat="identity", position = position_dodge(1)) +
ylab("Proportion of children giving number") +
xlab("Number of items") +
theme_bw(base_size=14) +
scale_fill_brewer(palette="Set1") + facet_wrap(Age~prompt, nrow = 4) + theme(legend.position="none")
setwd("~/Documents/Projects/si-quant/analysis")
setwd("~/Documents/Projects/si-quant/analysis")
source('~/.active-rstudio-document', echo=TRUE)
agesplit = factor(agesplit,
source('~/.active-rstudio-document', echo=TRUE)
opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE)
library(tidyr)
library(dplyr)
rm(list=ls())
opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
setwd("~/Documents/Projects/si-quant/analysis")
library(knitr)
opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(stringr)
library(tidyr)
library(markdown)
library(directlabels)
library(magrittr)
library(bootstrap)
library(RCurl)
library(langcog)
theme_set(theme_bw())
source('~/.active-rstudio-document', echo=TRUE)
install.packages('devtools')
devtools::install_github("langcog/langcog")
library(knitr)
opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE)
rm(list=ls())
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(stringr)
library(tidyr)
library(markdown)
library(directlabels)
library(magrittr)
library(bootstrap)
library(RCurl)
library(langcog)
theme_set(theme_bw())
d <- read.csv("../data/implicatures_adhocScalar_data.csv")
#fill in the selection types for easier analyses
d_exp1=melt.data.frame(d,c("Subj_ID", "age","agegroup", "list"),c("carrots", "hats", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrots_condition", "hats_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrots_type", "hats_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
data_exp1 <- d_exp1[1:864,]
data_exp1$condition <- d_exp1$value[865:1728]
data_exp1$type <- d_exp1$value[1729:2592]
names(data_exp1)[5] <- "item"
names(data_exp1)[6] <- "correct"
data_exp1$correct <- data_exp1$correct==1
attach(data_exp1)
data_exp1$trial_type[type == "implicature"] <- "implicature"
data_exp1$trial_type[type != "implicature"] <- "control"
detach(data_exp1)
data_exp1 %<>%
filter(Subj_ID != "", correct != "NA") %>%
mutate(agesplit = cut(age, breaks=c(4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA")
#renaming for graphs
data_exp1$type <- factor(data_exp1$type,
levels = c("implicature","control_comparison",
"control_distractor",
"control_none","control_unambiguous", "control_all"),
labels = c("Implicature","Comparison",
"Distractor",
"None","Unambig. Some", "All"))
data_exp1$condition <- factor(data_exp1$condition,
levels = c("adhoc","scalar"),
labels = c("Ad-hoc","Scalar"))
data_exp1 %<>%
rename(Age = agesplit)
View(data_exp1)
d <- read.csv("../data/implicatures_adhocScalar_data.csv")
#fill in the selection types for easier analyses
d_exp1=melt.data.frame(d,c("Subj_ID", "age","agegroup", "list"),c("carrots", "hats", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrots_condition", "hats_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrots_type", "hats_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
data_exp1 <- d_exp1[1:864,]
data_exp1$condition <- d_exp1$value[865:1728]
data_exp1$type <- d_exp1$value[1729:2592]
names(data_exp1)[5] <- "item"
names(data_exp1)[6] <- "correct"
data_exp1$correct <- data_exp1$correct==1
attach(data_exp1)
data_exp1$trial_type[type == "implicature"] <- "implicature"
data_exp1$trial_type[type != "implicature"] <- "control"
detach(data_exp1)
data_exp1 %<>%
filter(Subj_ID != "", correct != "NA") %>%
mutate(agesplit = cut(age, breaks=c(4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA")
#renaming for graphs
data_exp1$type <- factor(data_exp1$type,
levels = c("implicature","control_comparison",
"control_distractor",
"control_none","control_unambiguous", "control_all"),
labels = c("Implicature","Comparison",
"Distractor",
"None","Unambig. Some", "All"))
data_exp1$condition <- factor(data_exp1$condition,
levels = c("adhoc","scalar"),
labels = c("Ad-hoc","Scalar"))
data_exp1 %<>%
rename(Age = agesplit)
d <- read.csv("../data/implicatures_adhocScalar_data.csv")
#fill in the selection types for easier analyses
d_exp1=melt.data.frame(d,c("Subj_ID", "age","agegroup", "list"),c("carrots", "hats", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrots_condition", "hats_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrots_type", "hats_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
data_exp1 <- d_exp1[1:864,]
data_exp1$condition <- d_exp1$value[865:1728]
data_exp1$type <- d_exp1$value[1729:2592]
names(data_exp1)[5] <- "item"
names(data_exp1)[6] <- "correct"
data_exp1$correct <- data_exp1$correct==1
attach(data_exp1)
data_exp1$trial_type[type == "implicature"] <- "implicature"
data_exp1$trial_type[type != "implicature"] <- "control"
detach(data_exp1)
data_exp1 %<>%
filter(Subj_ID != "", correct != "NA") %>%
mutate(agesplit = cut(age, breaks=c(4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA")
#renaming for graphs
data_exp1$type <- factor(data_exp1$type,
levels = c("implicature","control_comparison",
"control_distractor",
"control_none","control_unambiguous", "control_all"),
labels = c("Implicature","Comparison",
"Distractor",
"None","Unambig. Some", "All"))
data_exp1$condition <- factor(data_exp1$condition,
levels = c("adhoc","scalar"),
labels = c("Ad-hoc","Scalar"))
data_exp1 %<>%
dplyr::rename(Age = agesplit)
agg.1<- data_exp1 %>%
mutate(correct = as.integer(correct)) %>%
group_by(condition, type, trial_type, Age)%>%
multi_boot_standard("correct", na.rm=T)
View(agg.1)
View(agg.1)
t.test(subset(agg.1, agegroup=="4-4.5 years" & type=="All")$mean, mu=0.5)
#4-4.5
t.test(subset(agg.1, Age=="4-4.5 years" & type=="All")$mean, mu=0.5)
?t.test
t.test(subset(agg.1, Age=="(4,4.5]" & type=="All")$mean, mu=0.5)
t.test(subset(agg.1, Age==(4,4.5] & type=="All")$mean, mu=0.5)
data_exp1 %<>%
filter(Subj_ID != "", correct != "NA") %>%
mutate(agesplit = cut(age, breaks=c(4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA")
View(data_exp1)
data_exp1 %<>%
filter(Subj_ID != "", correct != "NA") %>%
mutate(agesplit = cut(age, breaks=c(4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("4-4.5 years", "4.5-5 years")))
View(data_exp1)
library(knitr)
opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE)
rm(list=ls())
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(stringr)
library(tidyr)
library(markdown)
library(directlabels)
library(magrittr)
library(bootstrap)
library(RCurl)
library(langcog)
theme_set(theme_bw())
d <- read.csv("../data/implicatures_adhocScalar_data.csv")
#fill in the selection types for easier analyses
d_exp1=melt.data.frame(d,c("Subj_ID", "age","agegroup", "list"),c("carrots", "hats", "cookies", "trains", "cats", "purses",  "keys", "shirts", "breads", "horses", "bears", "frogs", "plates", "books", "elephants", "lamps", "bananas", "butterflies",
"carrots_condition", "hats_condition", "cookies_condition", "trains_condition", "cats_condition", "purses_condition",  "keys_condition", "shirts_condition", "breads_condition", "horses_condition", "bears_condition", "frogs_condition", "plates_condition", "books_condition", "elephants_condition", "lamps_condition", "bananas_condition", "butterflies_condition",
"carrots_type", "hats_type", "cookies_type", "trains_type", "cats_type", "purses_type",  "keys_type", "shirts_type", "breads_type", "horses_type", "bears_type", "frogs_type", "plates_type", "books_type", "elephants_type", "lamps_type", "bananas_type", "butterflies_type"))
data_exp1 <- d_exp1[1:864,]
data_exp1$condition <- d_exp1$value[865:1728]
data_exp1$type <- d_exp1$value[1729:2592]
names(data_exp1)[5] <- "item"
names(data_exp1)[6] <- "correct"
data_exp1$correct <- data_exp1$correct==1
attach(data_exp1)
data_exp1$trial_type[type == "implicature"] <- "implicature"
data_exp1$trial_type[type != "implicature"] <- "control"
detach(data_exp1)
data_exp1 %<>%
filter(Subj_ID != "", correct != "NA") %>%
mutate(agesplit = cut(age, breaks=c(4, 4.5, 5)),
agesplit = factor(agesplit,
labels=c("4-4.5 years", "4.5-5 years"))) %>%
filter(agesplit != "NA")
#renaming for graphs
data_exp1$type <- factor(data_exp1$type,
levels = c("implicature","control_comparison",
"control_distractor",
"control_none","control_unambiguous", "control_all"),
labels = c("Implicature","Comparison",
"Distractor",
"None","Unambig. Some", "All"))
data_exp1$condition <- factor(data_exp1$condition,
levels = c("adhoc","scalar"),
labels = c("Ad-hoc","Scalar"))
data_exp1 %<>%
dplyr::rename(Age = agesplit)
View(data_exp1)
agg.1<- data_exp1 %>%
mutate(correct = as.integer(correct)) %>%
group_by(condition, type, trial_type, agegroup)%>%
multi_boot_standard("correct", na.rm=T)
t.test(subset(agg.1, agegroup=="4.0--4.5" & type=="All")$mean, mu=0.5)
t.test(subset(data_exp1, agegroup=="4.0--4.5" & type=="All")$correct, mu=0.5)
t.test(subset(data_exp1, agegroup=="4.5--5.0" & type=="All")$correct, mu=0.5)
t.test(subset(data_exp1, agegroup=="4.0--4.5" & type=="Implicature" & condition == "Scalar")$correct, mu=0.5)
d <- data_exp1 %>%
filter(condition == "Scalar")
View(d)
t.test(subset(d, agegroup=="4.0--4.5" & type=="Implicature")$correct, mu=0.5)
t.test(subset(d, agegroup=="4.5--5.0" & type=="Implicature")$correct, mu=0.5)
t.test(subset(d, agegroup=="4.0--4.5" & type=="None")$correct, mu=0.5)
t.test(subset(d, agegroup=="4.5--5.0" & type=="Implicature")$correct, mu=0.5)
t.test(subset(d, agegroup=="4.5--5.0" & type=="None")$correct, mu=0.5)
